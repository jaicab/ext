@charset "UTF-8"; 


// -------------------------------------------------------------------------------------
//                              
//                            ext(); v1.0 - @extend on a budget
//
//                                     jaicab.com/ext/
//
// -------------------------------------------------------------------------------------
//
// List all you extend budgets on the $ext-budget.
// It is recommended to have, at least, a default budget call "total".
// The total budget would always cover all the placeholders across the system.
//
// You can start using this library like so:
//
//   @include ext(my_placeholder);
//
// Then all the placeholders will be counted and you will be warned if surpass the budget.
//
// If you want to create targeted budgets, add another budget to the $ext-budget map.
// Then use it like so:
//
//   @include ext(my_placeholder, targeted);
//
//
// 2015 - Made with â™¥ by Jaime Caballero (@jaicab_)



// Placeholder budget.
//
// In 'total', set the maximun number of times you want a placeholder to be used.
// If you want to add custom budgets, add another one right after total.
// Total is a keyword, so it will always count all the placeholders, no matter the target.
//
// Should be put with your other variables, before the mixins.
// @type Map
$ext-budget: (
  total: 15,
  heading: 12
) !default !global;


// Options
//
// The options available are:
//   - warn-over {Bool} (Default: true): Warns you when a placeholder has been used more than budgeted.
//   - warn-duplicates {Bool} (Default: true): Warn when you use a placeholder in the same selector more than once.
//   - over-only {Bool} (Default: true): For placeholders on debug. Only show placeholders over the budget.
//   - show-all {Bool} (Default: true): For budgets debug. List an expanded version of all the used budgets, no matter of the results.
//
// Should be put with your other variables, before the mixins.
// @type Map
$ext-options: (
  warn-over: true,
  warn-duplicates: true,
  over-only: true,
  show-all: true
) !default !global;


//Initiates the variables necessary for ext() to work
@mixin ext-init() {

  // OPTIONS 
  @if not variable-exists(ext-opt){
    // Default options
    $ext-opt: (
      warn-over: true,
      warn-duplicates: true,
      over-only: true,
      show-all: true
    ) !global;
    
    // If the developer has set new options($ext-options), merge them with the defaults.
    @if variable-exists(ext-options) {
      $ext-opt: map-merge($ext-opt, $ext-options) !global;
    }
  }

  // FOR EXT()
  // If there is no $ext-budget variable
  @if not variable-exists(ext-budget){
    @warn "You must set you placeholder budgets before using ext().";
  }

  // Or no budgets specified
  @elseif not length($ext-budget) {
    @warn "You must specify at least one budget. Use 'total' by default";
  }

  // If the placeholder collection hasn't still been created.
  @elseif not variable-exists(ext-map){
    // Create map
    $ext-map: () !global;

    @each $key, $budget in $ext-budget{
      $pair: ($key: ());
      $ext-map: map-merge($ext-map, $pair) !global;
    }
  }
  
}


// Gets an option from the options map
//
// @param {String} $option - Name of the option
//
// @example scss
//   ext-get-option(warn-duplicated);
//   // -> true
//
// @returns {List} $selectors - List of selectors without duplications
@function ext-get-option($option) {
  
  $ret: ();

  @if not map-has-key($ext-opt, $option) {
    @warn "The option #{$option} is not defined or part of the options.";
  }
  @else{
    $ret: map-get($ext-opt, $option);
  }
  
  @return $ret;
}


// Removes duplicates from a Sass list and joins them with commas
//
// @param {List} $selectors - List of selectors
//
// @example scss
//   $list: html, .foo, body, .foo, form;
//   $list: ext-remove-duplicates($list);
//   // -> html, .foo, body, form
//
// @returns {List} $selectors - List of selectors without duplications
@function ext-remove-duplicates($selectors, $placeholder) {
  
  $ret: ();
  
  @each $selector in $selectors {
    @if not index($ret, $selector) {
        $ret: append($ret, $selector, comma);
    }
    @elseif ext-get-option(warn-duplicates) {
      // Warn if duplicated selector
      @warn "The selector '#{$selector}' has already been extended for the %#{$placeholder} placeholder.";
    }
  }
  
  @return $ret;
}


// Lists a map of placeholders and selectors formatted for pseudoelements
//
// @param {List} $map - Map formed by a key and a map of (placeholder, selector list)
// @param {String} $key - Key to budget and target a specific range of placeholders.
//
// @example scss
//   $list: html, .foo, body, .foo, form;
//   $list: ext-remove-duplicates($list);
//   // html, .foo, body, form
//
// @returns {List} $selectors - List of selectors without duplications
@function ext-list-map(
    $map, 
    $key: total
  ){

  $ret: '';

  // If it's been extended
  @if length($map)>0 {

    // List the key
    $over-budget: 0;
    $count-selectors: 0;
    $ret-loop: '';

    // Loop through the placeholders
    @each $placeholder, $selectors in $map {

        // Count selectors
        $count-selectors: length($selectors);

        // List the placeholder and show use respect budget
        @if length($selectors)>map-get($ext-budget, $key) or not ext-get-option(over-only){
          $ret-loop: "#{$ret-loop}" + "#{length($selectors)}/#{map-get($ext-budget, $key)} - %#{$placeholder}";
        }

        // If current placeholder is under the budget
        @if length($selectors)<=map-get($ext-budget, $key) {
          // And we want to see it
          @if not ext-get-option(over-only){
            // Format for the ones under budget
            $ret-loop: "#{$ret-loop}" + ": '" + "#{$selectors}" + "',\A";  
          }
        }
        // Always show the ones over the budget
        @else{
          // Format for over budget
          $ret-loop: "#{$ret-loop}" + " => .#{$placeholder} for: '" + "#{$selectors}" + "',\A";  
          $over-budget: $over-budget+1;
        }
        
    }

    $ext-ratio: (map-get($ext-budget, $key) * length($map));

    // If this budget is all good
    @if $over-budget<1 {
      // And we want to see the good ones
      @if ext-get-option(show-all) {
        $ret: "All good! - #{$over-budget} of #{length($map)} #{$key} (#{map-get($ext-budget, $key)}, #{$count-selectors}/#{$ext-ratio} ratio)";
        $ret: "#{$ret} \A #{$ret-loop} \A";    
      }
    }
    @else{
      $ret: "\26A0  HEY! - #{$over-budget} of #{length($map)} #{$key} (#{map-get($ext-budget, $key)}, #{$count-selectors}/#{$ext-ratio} ratio)";
      $ret: "#{$ret} \A #{$ret-loop} \A";    
    }


  }

  @return $ret;
}


// Custom @extend mixin
//
// @param {List} $map - Map formed by a key and a map of (placeholder, selector list)
// @param {String} $key - Key to budget and target a specific range of placeholders.
// @param {String} $flag - Room for the !optional flag.
//
// @example scss
//   $list: html, .foo, body, .foo, form;
//   $list: ext-remove-duplicates($list);
//   // html, .foo, body, form
//
// @returns {List} $selectors - List of selectors without duplications
@mixin ext(
    $placeholder, 
    $key: total,
    $flag: ''
  ) {
  
  // If there is a parent, it's extendable
  @if not & {
    @warn "You can't extend outside a selector.";
  }

  @else{  

    // Extend would return an error if the placeholder doesn't exist
    @extend %#{$placeholder} #{$flag};

    // Check that the budget is there and handle in a variable
    @if not variable-exists(ext-map){
      @include ext-init();  
    }
    @if map-has-key($ext-map, $key) {
      $ext-map-key: map-get($ext-map, $key) !global;
    }
    @else{
      @warn "The budget #{$key} hasn't been specified. Please add it to your $ext-budget list.";
    }

    // If we don't, initialize placeholder to the current selectors
    $placeholder-selectors: &; // Yes, this actually works since Sass 3.4

    // If we have the budget, add one
    @if map-has-key($ext-map-key, $placeholder) {
      // Get the current selectors, join them with the new ones and remove the duplicates
      $placeholder-selectors: join( map-get($ext-map-key, $placeholder), &, comma);
    }

    // WARN IF DUPLICATED SELECTORS
    $placeholder-selectors: ext-remove-duplicates($placeholder-selectors, $placeholder);

    // Update the key -> placeholder map
    $ext-map-key: map-merge($ext-map-key, ($placeholder: $placeholder-selectors)) !global;
    $ext-map: map-merge($ext-map, ($key: $ext-map-key)) !global;

    // Update the total one
    @if $key!="total" and map-has-key($ext-map, total) {
      $ext-map-key: map-merge($ext-map-key, (total: $placeholder-selectors)) !global;
      $ext-map: map-merge($ext-map, (total: map-merge(map-get($ext-map, total), ($placeholder: $placeholder-selectors)))) !global;
    }

    // Check if it's been overused
    @if length($ext-map-key)>0 {
      // If there are more placeholder than estimated, warn the user
      //@warn #{map-get($ext-map-key, $placeholder)};
      @if (length(map-get($ext-map-key, $placeholder)) > map-get($ext-budget, $key)) {
        @if ext-get-option(warn-over) {
          @warn "%#{$placeholder} has been used #{(length(map-get($ext-map-key, $placeholder)) - map-get($ext-budget, $key))} times more than estimated (#{map-get($ext-budget, $key)}). Check '"+&+"' to prevent that. ";
        }
      }
    }

  }
}

// Debug the results collected by ext() till being called.
// IMPORTANT: Should be used at the end of your Sass file.
//
// @param {String} $key-filter - If specified, limits debug to a single budget. If not, shows all.
//
// @example scss
//   @include ext-debug();
//   // -> fixed debug info in body:after
//
// @returns {List} $selectors - List of selectors without duplications
@mixin ext-debug(
    $key-filter: all
  ) {

    body:after {
        background: #635c92;
        background: rgba(#635c92, 0.9);
        color: #f2f2f2;
        font-size: small-caption;
        padding: 2em 2em 1em 2em;
        text-shadow: 1px 1px 0 saturate(#069, 20%);
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        font-size: .9em;
        position: fixed;
        left: 0;
        top: 0;
        z-index: 100;
        display: block;

        // Loop through the keys
        $result: '# ext() v1.0       jaicab.com/ext/\A\A';
        // If there's a key filter
        @if $key-filter!=all {
          @if not map-has-key($ext-map, $key-filter) {
            @warn "Seems like the key '#{$key-filter}' is not on the budget or hasn't been used with ext().";
          }
          @else{
            $result: ext-list-map($map, $key);
          }
        }

        @else{
          // Show all of them
          @each $key, $map in $ext-map {
            $result: "#{$result}" + ext-list-map($map, $key);
          }

        }
        @if $result=='# ext() v1.0       jaicab.com/ext/\A\A'{
          $result: "#{$result}" + " Nothing to see here. Play with show-all and over-only options to see everything.\A\A ";
        }

        content: $result;
        white-space: pre-wrap;

    }
}